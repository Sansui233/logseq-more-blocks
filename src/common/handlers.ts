import { ModelCallbacks } from "@logseq/libs";
import TextInput from "../components/TextInput";
import { TNodeData } from "./data-attrs";

export const model: ModelCallbacks<"handleInput" | "handleFocusOut" | "handleClick", TNodeData> = {
  handleInput: async (evt) => {

    // get the target block
    const block = await logseq.Editor.getBlock(evt.dataset.slotBlockUuid)
    if (!block) {
      console.error("[more blocks] no target slot block found for input event", evt)
      return
    }

    // console.debug("handleInput event", evt)
    // console.debug("handleInput taegetblock", block)

    //check editor component
    const [_, componentName, domOrEditor, renderId] = evt.id.split("_")
    if (domOrEditor !== "editor") {
      console.error("[more blocks] input event is not generated by mb editor", evt)
      return
    }
    if (!renderId) {
      console.error("[more blocks] renderId missing", evt)
      return
    }
    // dispatch solutions
    if (componentName === TextInput.name) {
      // sync slot block
      logseq.Editor.updateBlock(
        block.uuid,
        TextInput.slotText(renderId, evt.value)
      )
    }
  },

  handleClick: async (evt) => {
    const rect = await logseq.App.queryElementRect("#" + evt.id)

    // get clicked block
    const block = await logseq.Editor.getBlock(evt.dataset.blockUuid)
    // console.debug("handleClick event", evt)
    // console.debug("handleClick block", block)
    if (!block) {
      console.error("[more blocks] block missing on event", evt)
      return
    }

    // check clicked component and dispatch solutions
    const [_, componentName, domOrEditor, render_id] = evt.id.split("_")
    if (componentName === TextInput.name && render_id) {

      TextInput.provideEditorUi(
        evt.dataset.renderId,
        TextInput.parseSlotText(block?.content),
        rect,
        evt.dataset.blockUuid
      )
    }




    // or mount ui in plugin iframe
    // console.debug('#app:', document.getElementById("app"))
  },

  /**
   *  edit the real text in logseq block
   */
  handleFocusOut: async (evt) => {
    // console.debug("handleFocusOut", evt)
    const block = await logseq.Editor.getBlock(evt.dataset.blockUuid)
    if (block) {
      logseq.Editor.updateBlock(
        evt.dataset.blockUuid,
        TextInput.slotText(
          evt.dataset.renderId,
          evt.value
        )
      )
      // console.debug("handleFocusOut new", block.content)
    }
  }
}
/**
 *  method names: used in dom property value
 */
export const handlerNames = (() => {
  const keys = Object.keys(model) as Array<keyof typeof model>;
  let o: any = {};
  for (let i = 0; i < keys.length; i++) {
    if (!keys[i]) continue;
    o[keys[i]!] = keys[i];
  }
  return o as {
    [P in keyof typeof model]: P;
  };
})();

